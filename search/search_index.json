{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the Riff.CC Wiki! If you've stumbled into this page, congratulations - you have discovered and are hopefully interested in a platform for improving the world's access to free and open information! Riff.CC is a non-profit project that aims to build an alternative to the current centralized server model - one that is decentralized, flexible, free and open-source, and powered by a low-cost content distribution system. Rather than hosting everything in a centralized server, Riff enables websites to host their files across various computers by virtue of letting users download copies of a website's data - such as images and uploaded files - on their personal drives, which then are forwarded to any device accessing a page that uses said data. This process, made possible by the Interplanetary Filesystem (IPFS) protocol, helps future-proof websites and their contents by virtue of making it far less likely that their content becomes lost forever should the website ever shut down - all that is necessary is that at least one person still have the files and their according IPFS hash in a device with internet connection. With the increasing risks and cases of online data becoming lost media due to servers shutting down or being taken down, Riff.CC provides a solution that can easily make those issues a thing of the past. Funding for the Riff.CC project is provided via OpenCollective . How it works When you upload a file to a server using Riff.CC, rather than providing an URL linking to a server's data - which will break should the server go down - it uses the aforementioned IPFS protocol to manage how the server accesses the file, by encurling it as a set of hashes called Content Identifier that points to the content on a decentralized network, as well as serving as a stamp of authenticity for the content. Furthermore, utilizing the same protocol, users can contribute to the server by downloading relevant data and media onto their own drives to decentralize the server's data storage. As such, when the website requests a file - for example, a PNG image in a web page - if any server or device in the world connected to the internet has the appropriate file with a matching IPFS Content Identifier hash, the website will pull the relevant content from their drive and provide it to the user accessing the page that requested it, without depending on a domain name or other requirements and limitations in the current web format that makes data storage so fragile. This greatly minimizes the costs of a server hosting the content, as well as the risk of said information being lost should the server go offline; because, if it does go offline, the data used in that server is still kept available by virtue of being hosted on others' spare hard drives, accessed through the Content Identifiers so long as at least one person still has the relevant file. Websites running on the Riff.CC platform as well as users participating in it can also federate with each other to co-host each other's contents, similar to platforms utilizing protocols such as ActivityPub; however, unlike those, federation in Riff.CC is opt-in rather than opt-out in order to reduce the risks of servers and users being exposed to harmful and extreme content such as CSAM. In the event that they do get exposed to it, the IPFS protocol also has a \"bad bits\" blocking feature, which lets users report a Content Identifier hash as being problematic or illegal. How to run it There are two different platforms Riff.CC can be hosted on - Orbiter , which utilizes OrbitDB as its backend and is used to host the main Riff.CC instance; and CeramicRiff , which utilizes Ceramic as its backend. Both have different setup procedures, but the process of running them is largely similar. Refer to the below shortcuts on relevant pages for instructions: Installation Install using Orbiter Install using CeramicRiff Running and Maintaining (TBD) Credits Authored by @Zorlin , @julienmalard , @en0c-026 , @SimplyTadpole and the Riff.CC Project. Sponsors Thank you to our sponsors, who have generously provided funding for the development of the Riff.CC Project: Money Every 3 Days","title":"Home"},{"location":"#welcome-to-the-riffcc-wiki","text":"If you've stumbled into this page, congratulations - you have discovered and are hopefully interested in a platform for improving the world's access to free and open information! Riff.CC is a non-profit project that aims to build an alternative to the current centralized server model - one that is decentralized, flexible, free and open-source, and powered by a low-cost content distribution system. Rather than hosting everything in a centralized server, Riff enables websites to host their files across various computers by virtue of letting users download copies of a website's data - such as images and uploaded files - on their personal drives, which then are forwarded to any device accessing a page that uses said data. This process, made possible by the Interplanetary Filesystem (IPFS) protocol, helps future-proof websites and their contents by virtue of making it far less likely that their content becomes lost forever should the website ever shut down - all that is necessary is that at least one person still have the files and their according IPFS hash in a device with internet connection. With the increasing risks and cases of online data becoming lost media due to servers shutting down or being taken down, Riff.CC provides a solution that can easily make those issues a thing of the past. Funding for the Riff.CC project is provided via OpenCollective .","title":"Welcome to the Riff.CC Wiki!"},{"location":"#how-it-works","text":"When you upload a file to a server using Riff.CC, rather than providing an URL linking to a server's data - which will break should the server go down - it uses the aforementioned IPFS protocol to manage how the server accesses the file, by encurling it as a set of hashes called Content Identifier that points to the content on a decentralized network, as well as serving as a stamp of authenticity for the content. Furthermore, utilizing the same protocol, users can contribute to the server by downloading relevant data and media onto their own drives to decentralize the server's data storage. As such, when the website requests a file - for example, a PNG image in a web page - if any server or device in the world connected to the internet has the appropriate file with a matching IPFS Content Identifier hash, the website will pull the relevant content from their drive and provide it to the user accessing the page that requested it, without depending on a domain name or other requirements and limitations in the current web format that makes data storage so fragile. This greatly minimizes the costs of a server hosting the content, as well as the risk of said information being lost should the server go offline; because, if it does go offline, the data used in that server is still kept available by virtue of being hosted on others' spare hard drives, accessed through the Content Identifiers so long as at least one person still has the relevant file. Websites running on the Riff.CC platform as well as users participating in it can also federate with each other to co-host each other's contents, similar to platforms utilizing protocols such as ActivityPub; however, unlike those, federation in Riff.CC is opt-in rather than opt-out in order to reduce the risks of servers and users being exposed to harmful and extreme content such as CSAM. In the event that they do get exposed to it, the IPFS protocol also has a \"bad bits\" blocking feature, which lets users report a Content Identifier hash as being problematic or illegal.","title":"How it works"},{"location":"#how-to-run-it","text":"There are two different platforms Riff.CC can be hosted on - Orbiter , which utilizes OrbitDB as its backend and is used to host the main Riff.CC instance; and CeramicRiff , which utilizes Ceramic as its backend. Both have different setup procedures, but the process of running them is largely similar. Refer to the below shortcuts on relevant pages for instructions: Installation Install using Orbiter Install using CeramicRiff Running and Maintaining (TBD)","title":"How to run it"},{"location":"#credits","text":"Authored by @Zorlin , @julienmalard , @en0c-026 , @SimplyTadpole and the Riff.CC Project.","title":"Credits"},{"location":"#sponsors","text":"Thank you to our sponsors, who have generously provided funding for the development of the Riff.CC Project: Money Every 3 Days","title":"Sponsors"},{"location":"ceramicriff-index/","text":"Riff.CC on Ceramic (ComposeDB) Riff on Ceramic (also referred to as CeramicRiff) is a proof-of-concept version of Riff.CC, implemented using Ceramic and ComposeDB. It is one of the two current platforms for hosting Riff.CC instances, the other being Orbiter . This page contains instructions on how to set up and install a Riff.CC instance through CeramicRiff. Getting Started CeramicRiff will work on any standard Linux distribution where standard utilities like a webserver and Node.JS are available, but our instructions specifically cover the latest LTS releases of Ubuntu and Debian only . Ask us (or submit a PR) if you want any others to be added. Dependencies You must make sure the git command is installed. If not, you need to install it: sudo apt install git Additionally, CeramicRiff utilizes Node.JS and yarn to set up and install the platform, and as such it's required to install them as well. We suggest using the NodeSource installation guide , with $NODE_MAJOR set to 20: 1.) Download and import the Nodesource GPG key sudo apt-get update sudo apt-get install -y ca-certificates curl gnupg sudo mkdir -p /etc/apt/keyrings curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | sudo gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg 2.) Create deb repository NODE_MAJOR=20 echo \"deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_$NODE_MAJOR.x nodistro main\" | sudo tee /etc/apt/sources.list.d/nodesource.list 3.) Run apt update and install the Node.JS package sudo apt-get update sudo apt-get install nodejs -y 4.) Install Yarn once Node.JS is installed: sudo npm install -g yarn 5.) Set up and configure ceramic-node . CeramicRiff requires it to be configured and running in order to function - Ceramic-Node's location is not important, as it runs as a service on the local machine, which CeramicRiff communicates with. Installation 1.) Clone CeramicRiff's GitHub repository: git clone https://github.com/riffcc/riff.cc-vue.git 2.) Move into CeramicRiff's directory and set up its installation packages: cd riff.cc-vue yarn install 3.) Rename .env.local.example to env.local, and fill in its variables. We strongly recommend using our node and the new admin server: VITE_NODE_URL =https://ftwc.xyz/ceramic VITE_ADMIN_SERVER =https://ftwc.xyz/api/admin VITE_NODE_URL=<YOUR_NODE_URL> # If you run a own local node <http://localhost:7007> , or an external node <http://<SERVER_PUBLIC_IP>:7007> VITE_ADMIN_SERVER=<YOUR_ADMIN_SERVER_URL> # Run admin server in riffcc/eramic-node repository via yarn run admin:server VITE_WEBSITE_ID=<TEST_WEBSITE_ID> # Generated in riffcc/eramic-node repository via yarn run generate:website 4.) Run ceramic-node so CeramicRiff can properly communicate with it. 5.) Run the application in development mode (with hot reloading): yarn dev License Made available under the MIT License. Credits Authored by @en0c-026 , @Zorlin , and the Riff.CC Project.","title":"CeramicRiff"},{"location":"ceramicriff-index/#riffcc-on-ceramic-composedb","text":"Riff on Ceramic (also referred to as CeramicRiff) is a proof-of-concept version of Riff.CC, implemented using Ceramic and ComposeDB. It is one of the two current platforms for hosting Riff.CC instances, the other being Orbiter . This page contains instructions on how to set up and install a Riff.CC instance through CeramicRiff.","title":"Riff.CC on Ceramic (ComposeDB)"},{"location":"ceramicriff-index/#getting-started","text":"CeramicRiff will work on any standard Linux distribution where standard utilities like a webserver and Node.JS are available, but our instructions specifically cover the latest LTS releases of Ubuntu and Debian only . Ask us (or submit a PR) if you want any others to be added.","title":"Getting Started"},{"location":"ceramicriff-index/#dependencies","text":"You must make sure the git command is installed. If not, you need to install it: sudo apt install git Additionally, CeramicRiff utilizes Node.JS and yarn to set up and install the platform, and as such it's required to install them as well. We suggest using the NodeSource installation guide , with $NODE_MAJOR set to 20: 1.) Download and import the Nodesource GPG key sudo apt-get update sudo apt-get install -y ca-certificates curl gnupg sudo mkdir -p /etc/apt/keyrings curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | sudo gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg 2.) Create deb repository NODE_MAJOR=20 echo \"deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_$NODE_MAJOR.x nodistro main\" | sudo tee /etc/apt/sources.list.d/nodesource.list 3.) Run apt update and install the Node.JS package sudo apt-get update sudo apt-get install nodejs -y 4.) Install Yarn once Node.JS is installed: sudo npm install -g yarn 5.) Set up and configure ceramic-node . CeramicRiff requires it to be configured and running in order to function - Ceramic-Node's location is not important, as it runs as a service on the local machine, which CeramicRiff communicates with.","title":"Dependencies"},{"location":"ceramicriff-index/#installation","text":"1.) Clone CeramicRiff's GitHub repository: git clone https://github.com/riffcc/riff.cc-vue.git 2.) Move into CeramicRiff's directory and set up its installation packages: cd riff.cc-vue yarn install 3.) Rename .env.local.example to env.local, and fill in its variables. We strongly recommend using our node and the new admin server: VITE_NODE_URL =https://ftwc.xyz/ceramic VITE_ADMIN_SERVER =https://ftwc.xyz/api/admin VITE_NODE_URL=<YOUR_NODE_URL> # If you run a own local node <http://localhost:7007> , or an external node <http://<SERVER_PUBLIC_IP>:7007> VITE_ADMIN_SERVER=<YOUR_ADMIN_SERVER_URL> # Run admin server in riffcc/eramic-node repository via yarn run admin:server VITE_WEBSITE_ID=<TEST_WEBSITE_ID> # Generated in riffcc/eramic-node repository via yarn run generate:website 4.) Run ceramic-node so CeramicRiff can properly communicate with it. 5.) Run the application in development mode (with hot reloading): yarn dev","title":"Installation"},{"location":"ceramicriff-index/#license","text":"Made available under the MIT License.","title":"License"},{"location":"ceramicriff-index/#credits","text":"Authored by @en0c-026 , @Zorlin , and the Riff.CC Project.","title":"Credits"},{"location":"orbiter-index/","text":"Riff.CC \"Orbiter\" Orbiter is a proof-of-concept version of Riff.CC, implemented using OrbitDB, Constellation, IPFS and other tools. It is one of the two current platforms for hosting Riff.CC instances, the other being CeramicRiff . This page contains instructions on how to set up and install a Riff.CC instance through Orbiter. Getting started Orbiter will work on any standard Linux distribution where standard utilities like a webserver and Node.JS are available, but our instructions specifically cover the latest LTS releases of Ubuntu and Debian only . Ask us (or submit a PR) if you want any others to be added. Dependencies Before installing Orbiter, you must install the following dependencies: sudo apt install libnss3-dev libgtk-3-0 libgbm1 libasound2 libatk1.0-0 node-pre-gyp git curl Additionally, Orbiter utilizes Node.JS and pnpm to set up and install the platform, and as such it's required to install them as well. It is possible to use yarn instead of pnpm, but it's not recommended as it requires much more memory. Nevertheless, instructions for both will be provided. Base: Node.JS This is required whether you use pnpm or yarn. We suggest using the NodeSource installation guide , with $NODE_MAJOR set to 20: 1.) Download and import the Nodesource GPG key: sudo apt-get update sudo apt-get install -y ca-certificates curl gnupg sudo mkdir -p /etc/apt/keyrings curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | sudo gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg 2.) Create deb repository: NODE_MAJOR=20 echo \"deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_$NODE_MAJOR.x nodistro main\" | sudo tee /etc/apt/sources.list.d/nodesource.list 3.) Run apt update and install the Node.JS package sudo apt-get update sudo apt-get install nodejs -y Method 1: pnpm You need to have installed Node.JS first. 1.) Download the official pnpm installation script: curl -fsSL https://get.pnpm.io/install.sh | sh - 2.) Source your .bashrc file so your system recognizes pnpm's path properly: source ~/.bashrc Method 2: yarn This is not necessary if you choose to use the pnpm method above. Install Yarn once Node.JS is installed: sudo npm install -g yarn Installation 1.) Clone Orbiter's GitHub repository: git clone https://github.com/riffcc/orbiter.git 2.) Move into Orbiter's directory and set up its installation dependencies: If using pnpm : sh cd orbiter pnpm install If using yarn : sh cd orbiter yarn 3.) Run the application in development mode (with hot reloading): If using pnpm : sh pnpm watch:web If using yarn : sh yarn dev 4.) Visit the application in your browser, generate a moderation database, copy the parameters the application gives you, and copy them to ./.env.local 5.) Stop and re-run the application to apply the new moderation database. Deploying to production Compile and minify the application: pnpm build Then deploy the bundle of HTML/CSS/JS that is produced. Customize configuration See Configuration Reference . Credits Authored by @julienmalard , @Zorlin , and the Riff.CC Project.","title":"Orbiter"},{"location":"orbiter-index/#riffcc-orbiter","text":"Orbiter is a proof-of-concept version of Riff.CC, implemented using OrbitDB, Constellation, IPFS and other tools. It is one of the two current platforms for hosting Riff.CC instances, the other being CeramicRiff . This page contains instructions on how to set up and install a Riff.CC instance through Orbiter.","title":"Riff.CC \"Orbiter\""},{"location":"orbiter-index/#getting-started","text":"Orbiter will work on any standard Linux distribution where standard utilities like a webserver and Node.JS are available, but our instructions specifically cover the latest LTS releases of Ubuntu and Debian only . Ask us (or submit a PR) if you want any others to be added.","title":"Getting started"},{"location":"orbiter-index/#dependencies","text":"Before installing Orbiter, you must install the following dependencies: sudo apt install libnss3-dev libgtk-3-0 libgbm1 libasound2 libatk1.0-0 node-pre-gyp git curl Additionally, Orbiter utilizes Node.JS and pnpm to set up and install the platform, and as such it's required to install them as well. It is possible to use yarn instead of pnpm, but it's not recommended as it requires much more memory. Nevertheless, instructions for both will be provided.","title":"Dependencies"},{"location":"orbiter-index/#base-nodejs","text":"This is required whether you use pnpm or yarn. We suggest using the NodeSource installation guide , with $NODE_MAJOR set to 20: 1.) Download and import the Nodesource GPG key: sudo apt-get update sudo apt-get install -y ca-certificates curl gnupg sudo mkdir -p /etc/apt/keyrings curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | sudo gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg 2.) Create deb repository: NODE_MAJOR=20 echo \"deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_$NODE_MAJOR.x nodistro main\" | sudo tee /etc/apt/sources.list.d/nodesource.list 3.) Run apt update and install the Node.JS package sudo apt-get update sudo apt-get install nodejs -y","title":"Base: Node.JS"},{"location":"orbiter-index/#method-1-pnpm","text":"You need to have installed Node.JS first. 1.) Download the official pnpm installation script: curl -fsSL https://get.pnpm.io/install.sh | sh - 2.) Source your .bashrc file so your system recognizes pnpm's path properly: source ~/.bashrc","title":"Method 1: pnpm"},{"location":"orbiter-index/#method-2-yarn","text":"This is not necessary if you choose to use the pnpm method above. Install Yarn once Node.JS is installed: sudo npm install -g yarn","title":"Method 2: yarn"},{"location":"orbiter-index/#installation","text":"1.) Clone Orbiter's GitHub repository: git clone https://github.com/riffcc/orbiter.git 2.) Move into Orbiter's directory and set up its installation dependencies: If using pnpm : sh cd orbiter pnpm install If using yarn : sh cd orbiter yarn 3.) Run the application in development mode (with hot reloading): If using pnpm : sh pnpm watch:web If using yarn : sh yarn dev 4.) Visit the application in your browser, generate a moderation database, copy the parameters the application gives you, and copy them to ./.env.local 5.) Stop and re-run the application to apply the new moderation database.","title":"Installation"},{"location":"orbiter-index/#deploying-to-production","text":"Compile and minify the application: pnpm build Then deploy the bundle of HTML/CSS/JS that is produced.","title":"Deploying to production"},{"location":"orbiter-index/#customize-configuration","text":"See Configuration Reference .","title":"Customize configuration"},{"location":"orbiter-index/#credits","text":"Authored by @julienmalard , @Zorlin , and the Riff.CC Project.","title":"Credits"}]}